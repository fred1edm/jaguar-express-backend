import axios from 'axios'

const WHATSAPP_API_TOKEN = process.env.WHATSAPP_API_TOKEN!
const PHONE_NUMBER_ID = process.env.PHONE_NUMBER_ID!
const WHATSAPP_API_URL = `https://graph.facebook.com/v18.0/${PHONE_NUMBER_ID}/messages`

/**
 * Env√≠a un c√≥digo de verificaci√≥n por WhatsApp usando la API oficial de Meta
 * @param phone - N√∫mero de tel√©fono en formato internacional (ej: +51987654321)
 * @param code - C√≥digo de verificaci√≥n de 6 d√≠gitos
 */
export async function sendVerificationCodeWhatsApp(phone: string, code: string): Promise<void> {
  try {
    // Formatear el n√∫mero de tel√©fono (remover espacios, guiones, etc.)
    const formattedPhone = phone.replace(/[^\d+]/g, '')
    
    // Mensaje de verificaci√≥n
    const message = {
      messaging_product: 'whatsapp',
      to: formattedPhone,
      type: 'template',
      template: {
        name: 'verification_code', // Nombre del template aprobado
        language: {
          code: 'es' // Espa√±ol
        },
        components: [
          {
            type: 'body',
            parameters: [
              {
                type: 'text',
                text: code
              }
            ]
          }
        ]
      }
    }

    // Si no tienes un template aprobado, usa mensaje de texto libre
    const fallbackMessage = {
      messaging_product: 'whatsapp',
      to: formattedPhone,
      type: 'text',
      text: {
        body: `üîê Tu c√≥digo de verificaci√≥n para Jaguar Express es: ${code}\n\nEste c√≥digo expira en 5 minutos.\n\n¬°No compartas este c√≥digo con nadie!`
      }
    }

    const response = await axios.post(WHATSAPP_API_URL, fallbackMessage, {
      headers: {
        'Authorization': `Bearer ${WHATSAPP_API_TOKEN}`,
        'Content-Type': 'application/json'
      }
    })

    console.log('‚úÖ C√≥digo de verificaci√≥n enviado por WhatsApp:', {
      phone: formattedPhone,
      messageId: response.data.messages?.[0]?.id,
      status: response.data.messages?.[0]?.message_status
    })

  } catch (error: any) {
    console.error('‚ùå Error enviando c√≥digo por WhatsApp:', {
      phone,
      error: error.response?.data || error.message
    })
    
    // Re-lanzar el error para que el controlador pueda manejarlo
    throw new Error(`Error enviando WhatsApp: ${error.response?.data?.error?.message || error.message}`)
  }
}

/**
 * Valida el formato del n√∫mero de tel√©fono
 * @param phone - N√∫mero de tel√©fono
 * @returns true si el formato es v√°lido
 */
export function validatePhoneNumber(phone: string): boolean {
  // Debe empezar con + y tener entre 10-15 d√≠gitos
  const phoneRegex = /^\+[1-9]\d{9,14}$/
  return phoneRegex.test(phone)
}

/**
 * Genera un c√≥digo de verificaci√≥n de 6 d√≠gitos
 * @returns C√≥digo de 6 d√≠gitos
 */
export function generateVerificationCode(): string {
  return Math.floor(100000 + Math.random() * 900000).toString()
}

/**
 * Almac√©n temporal en memoria para c√≥digos de verificaci√≥n
 * En producci√≥n, considera usar Redis para escalabilidad
 */
interface VerificationData {
  code: string
  expiresAt: Date
  attempts: number
}

const verificationCodes = new Map<string, VerificationData>()

/**
 * Almacena un c√≥digo de verificaci√≥n temporalmente
 * @param phone - N√∫mero de tel√©fono
 * @param code - C√≥digo de verificaci√≥n
 * @param ttlMinutes - Tiempo de vida en minutos (default: 5)
 */
export function storeVerificationCode(phone: string, code: string, ttlMinutes: number = 5): void {
  const expiresAt = new Date(Date.now() + ttlMinutes * 60 * 1000)
  verificationCodes.set(phone, {
    code,
    expiresAt,
    attempts: 0
  })
  
  // Limpiar c√≥digo expirado autom√°ticamente
  setTimeout(() => {
    verificationCodes.delete(phone)
  }, ttlMinutes * 60 * 1000)
}

/**
 * Verifica un c√≥digo de verificaci√≥n
 * @param phone - N√∫mero de tel√©fono
 * @param code - C√≥digo a verificar
 * @returns true si el c√≥digo es v√°lido
 */
export function verifyCode(phone: string, code: string): boolean {
  const data = verificationCodes.get(phone)
  
  if (!data) {
    return false // No hay c√≥digo para este tel√©fono
  }
  
  if (new Date() > data.expiresAt) {
    verificationCodes.delete(phone)
    return false // C√≥digo expirado
  }
  
  data.attempts++
  
  if (data.attempts > 3) {
    verificationCodes.delete(phone)
    return false // Demasiados intentos
  }
  
  if (data.code === code) {
    verificationCodes.delete(phone) // C√≥digo usado exitosamente
    return true
  }
  
  return false // C√≥digo incorrecto
}

/**
 * Verifica si existe un c√≥digo v√°lido para un tel√©fono
 * @param phone - N√∫mero de tel√©fono
 * @returns true si existe un c√≥digo v√°lido
 */
export function hasValidCode(phone: string): boolean {
  const data = verificationCodes.get(phone)
  return data ? new Date() <= data.expiresAt : false
}